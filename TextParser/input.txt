Объявление классов
Рассмотрим базовые возможности объявления классов.
Объявление класса состоит из заголовка и тела класса.
Заголовок класса
Вначале указываются модификаторы класса. Модификаторы доступа для класса уже обсуждались. Допустимым является public, либо его отсутствие - доступ по умолчанию.
Класс может быть объявлен как final. В этом случае не допускается создание наследников такого класса. На своей ветке наследования он является последним. Класс String и классы-обертки, например, являются final-классами.
После списка модификаторов указывается ключевое слово class, а затем имя класса - корректный Java-идентификатор. Таким образом, кратчайшим объявлением класса может являться такой модуль компиляции:
Example
class A {}
EndExample
Фигурные скобки обозначают тело класса, но о нем позже.
Указанный идентификатор становится простым именем класса. Полное составное имя класса строится из полного составного имени пакета, в котором он объявлен (если это не безымянный пакет), и простого имени класса, разделенных точкой. Область видимости класса, где он может быть доступен по своему простому имени - его пакет.
Далее заголовок может содержать ключевое слово eхtends, после которого должно быть указано имя (простое или составное) доступного не-final класса. В этом случае объявляемый класс наследуется от указанного класса. Если выражение eхtends не применяется, то класс наследуется напрямую от Оbject. Выражение eхtends Оbject допускается и игнорируется.
Example
class Parent {} = class Parent extends Object {}
final class LastChild extends Parent {}
class WrongChild extends LastChild {}
EndExample
Попытка расширить final-класс приведет к ошибке компиляции.
Если в объявлении класса A указано выражение eхtends B, то класс A называют прямым наследником класса B.
Класс A считается наследником класса B если:
-A является прямым наследником B;
-либо существует класс C, который является наследником B, а A является наследником C (это правило применяется рекурсивно).
Таким образом можно проследовать цепочки наследования на несколько уровней вверх.
Если компилятор обнаруживает, что класс является своим наследником, то возникает ошибка компиляции.
Example
class A extends B {}
class B extends C {}
class C extends A {}
EndExample

Объявление классов
Рассмотрим базовые возможности объявления классов.
Объявление класса состоит из заголовка и тела класса.
Заголовок класса
Вначале указываются модификаторы класса. Модификаторы доступа для класса уже обсуждались. Допустимым является public, либо его отсутствие - доступ по умолчанию.
Класс может быть объявлен как final. В этом случае не допускается создание наследников такого класса. На своей ветке наследования он является последним. Класс String и классы-обертки, например, являются final-классами.
После списка модификаторов указывается ключевое слово class, а затем имя класса - корректный Java-идентификатор. Таким образом, кратчайшим объявлением класса может являться такой модуль компиляции:

Фигурные скобки обозначают тело класса, но о нем позже.
Указанный идентификатор становится простым именем класса. Полное составное имя класса строится из полного составного имени пакета, в котором он объявлен (если это не безымянный пакет), и простого имени класса, разделенных точкой. Область видимости класса, где он может быть доступен по своему простому имени - его пакет.
Далее заголовок может содержать ключевое слово eхtends, после которого должно быть указано имя (простое или составное) доступного не-final класса. В этом случае объявляемый класс наследуется от указанного класса. Если выражение eхtends не применяется, то класс наследуется напрямую от Оbject. Выражение eхtends Оbject допускается и игнорируется.

Попытка расширить final-класс приведет к ошибке компиляции.
Если в объявлении класса A указано выражение eхtends B, то класс A называют прямым наследником класса B.
Класс A считается наследником класса B если:
-A является прямым наследником B;
-либо существует класс C, который является наследником B, а A является наследником C (это правило применяется рекурсивно).
Таким образом можно проследовать цепочки наследования на несколько уровней вверх.
Если компилятор обнаруживает, что класс является своим наследником, то возникает ошибка компиляции.
[]

